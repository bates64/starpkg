# Based on https://github.com/starship/starship/blob/master/.github/workflows/workflow.yml

on:
  push:
    paths:
      - "Cargo.toml"
      - "src/**"
      - "tests/**"
      - ".github/**"
  pull_request:
    paths:
      - "Cargo.toml"
      - "src/**"
      - "tests/**"
      - ".github/**"

name: Push

jobs:
  cargo_check:
    name: Cargo check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all

  cargo_test:
    name: Cargo test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test

      - run: sudo apt-get install libssl-dev pkg-config cmake zlib1g-dev --y

      - name: Install tarpaulin
        uses: actions-rs/cargo@v1
        with:
          command: install cargo-tarpaulin

      - name: Upload coverage to Codecov
        run: |
          cargo tarpaulin --out Xml
          bash <(curl -s https://codecov.io/bash)

  cargo_clippy:
    name: Cargo clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  cargo_publish:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Cargo publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --token ${{ secrets.CRATES_IO_TOKEN }}

  # Build sources for every OS
  github_build:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Build release binaries
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: starpkg-x86_64-unknown-linux-gnu.tar.gz
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: starpkg-x86_64-unknown-linux-musl.tar.gz
          - target: x86_64-apple-darwin
            os: macOS-latest
            name: starpkg-x86_64-apple-darwin.tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: starpkg-x86_64-pc-windows-msvc.zip
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get install -y musl-tools

      - name: Build target
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Prepare build artifacts [Windows]
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          strip starpkg.exe
          7z a ../../../${{ matrix.name }} starpkg.exe
          cd -
      - name: Prepare build artifacts [-nix]
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          strip starpkg
          tar czvf ../../../${{ matrix.name }} starpkg
          cd -
      - name: Upload build artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}

  github_release:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Create GitHub Release
    needs: github_build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download releases from github_build
        uses: actions/download-artifact@v1
        with:
          name: starpkg-x86_64-unknown-linux-gnu.tar.gz
          path: .
      - name: Download releases from github_build
        uses: actions/download-artifact@v1
        with:
          name: starpkg-x86_64-unknown-linux-musl.tar.gz
          path: .
      - name: Download releases from github_build
        uses: actions/download-artifact@v1
        with:
          name: starpkg-x86_64-apple-darwin.tar.gz
          path: .
      - name: Download releases from github_build
        uses: actions/download-artifact@v1
        with:
          name: starpkg-x86_64-pc-windows-msvc.zip
          path: .

      - name: Generate checksums
        run: for file in starpkg-*; do openssl dgst -sha256 -r "$file" | awk '{print $1}' > "${file}.sha256"; done

      - name: Generate release notes
        run: |
          # Temporary fix for https://github.com/actions/setup-go/issues/14
          export PATH=$PATH:$(go env GOPATH)/bin
          go get -u github.com/git-chglog/git-chglog/cmd/git-chglog
          git-chglog -c .github/chglog/config.yml $(git describe --tags) > RELEASE.md
      - name: Create GitHub release ${{ matrix.target }}
        uses: softprops/action-gh-release@v1
        with:
          files: |
            starpkg-x86_64-unknown-linux-gnu.tar.gz
            starpkg-x86_64-unknown-linux-gnu.tar.gz.sha256
            starpkg-x86_64-unknown-linux-musl.tar.gz
            starpkg-x86_64-unknown-linux-musl.tar.gz.sha256
            starpkg-x86_64-apple-darwin.tar.gz
            starpkg-x86_64-apple-darwin.tar.gz.sha256
            starpkg-x86_64-pc-windows-msvc.zip
            starpkg-x86_64-pc-windows-msvc.zip.sha256
          body_path: RELEASE.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
