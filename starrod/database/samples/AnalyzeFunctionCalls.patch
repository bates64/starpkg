
% Intercepts every function called by scripts and records
% which script variable they change.

#reserve 20000 $FunctionList

#reserve 58 $VarsCopy

#define .CopyPtr		0
#define .CopyArgc		4
#define .CopyScript		8
#define .CopyVars		C

#define .EntryLength	10

#define .AddrOffset		0
#define .CountOffset	4
#define .MapState		8
#define .BattleState	9
#define .MinArgc		A
#define .MaxArgc		B
#define .DeltaVarsFlags	C

% Entry:
% 0	(int) ptr
% 4	(int) call# (capped at FFFFFFFF)
% 8	(byte) bool usedInWorld?
% 9	(byte) bool usedInBattle?
% A	(byte) min argc
% B	(byte) max argc
% C	(short) var[i] changed?
% E (short) reserved
% 10	end
% C (int[3]) flags[i] changed?
% 1C end

#new:Function $SideEffectLogger
	% check script vars
	% A0 = script context
	% A2 = func addr (also at 80 (A0))
	% can use V0, V1, A1, A2
	PUSH	S0, S1, S2, S3
	LIO		S1, $VarsCopy
	SW		A2, .CopyPtr (S1)
	SW		A0, .CopyScript (S1)
	LBU		V0, 1 (A0)
	SW		V0, .CopyArgc (S1)
	DADDU	S2, A0, R0
	ADDIU	S3, R0, 19` % 16 vars + 3 flag words
	.CopyLoop
	LW		V0, 84 (S2)
	SW		V0, .CopyVars (S1)
	ADDIU	S3, S3, -1
	ADDIU	S1, S1, 4
	BNE		S3, R0, .CopyLoop
	ADDIU	S2, S2, 4
	POP		S0, S1, S2, S3
	% back to the script
	JALR	A2, RA
	NOP
	% check script now
	PUSH	S0, S1, S2, S3, S4, V0, V1
	LIO		S0, $FunctionList
	LIO		S1, $VarsCopy
	LW		S2, .CopyPtr (S1)
	.FunctionLoop
	LW		S3, .AddrOffset (S0)
	BEQ		S3, R0, .Missing
	NOP
	BNEL	S3, S2, .FunctionLoop
	ADDIU	S0, S0, .EntryLength
	B		.Found
	NOP
	.Missing	% proper function entry is on S0
	SW		S2, .AddrOffset (S0)
	ADDIU	V0, R0, FF
	SB		V0, .MinArgc (S0)
	.Found
	% update counter
	LW		S2, .CountOffset (S0)
	ADDIU	S2, S2, 1
	ADDIU	S3, R0, FFFF
	BNEL	S2, S3, 4
	SW		S2, .CountOffset (S0)
	% update argc
	LW		S2, .CopyArgc (S1)
	LBU		S3, .MinArgc (S0)
	BLTL	S2, S3, 4
	SB		S2, .MinArgc (S0)
	LBU		S3, .MaxArgc (S0)
	BGTL	S2, S3, 4
	SB		S2, .MaxArgc (S0)
	% check battle/map
	LIO		S2, 8009A600
	LBU		S2, 3 (S2)
	ADDIU	V0, R0, 1
	ADDIU	S3, R0, 2
	BEQL	S2, S3, 4
	SB		V0, .MapState (S0)
	ADDIU	S3, R0, 5
	BEQL	S2, S3, 4
	SB		V0, .BattleState (S0)
	% check delta args
	LW		S2, .CopyScript (S1)
	ADDIU	S2, S2, 84
	ADDIU	S1, S1, .CopyVars
	ADDIU	S3, R0, 15`
	LW		S4, .DeltaVarsFlags (S0)
	.CheckLoop
	LW		V0, 0 (S1)
	LW		V1, 0 (S2)
	BEQ		V0, V1, .NextVar
	NOP
	ADDIU	V0, R0, 1
	SLLV	V0, V0, S3
	SLL		V0, V0, 10
	OR		S4, S4, V0
	.NextVar
	ADDIU	S1, S1, 4
	ADDIU	S2, S2, 4
	ADDIU	S3, S3, -1
	BGEZ	S3, .CheckLoop
	NOP
	SW		S4, .DeltaVarsFlags (S0)
	POP		S0, S1, S2, S3, S4 V0, V1
	J		802C6458
	NOP
	
@Hook EAE00 % EAD98[68]
	JAL		$SideEffectLogger
	NOP
